// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSNumber;
@class NSDictionary;
@protocol UIApplicationDelegate;
@class NSDecimalNumber;

SWIFT_CLASS("_TtC9HurreeSDK18AnalyticsSingleton")
@interface AnalyticsSingleton : NSObject
+ (AnalyticsSingleton * _Nonnull)sharedInstance;

/// To save the custom logs as event with the event description.
///
/// \param log name of the screen
///
/// \param eventName name of the event message whic needs to be shown on the web end
///
/// \param withEventType category of the event, there are two types of events categorized for withEventType i.e. Normallog and Notificationlog
- (void)setCustomLogWithEventName:(NSString * _Nonnull)log eventName:(NSString * _Nonnull)eventName withEventType:(NSString * _Nonnull)withEventType;

/// Last method in the queue for the standard login process. After deportUserValues and deportKeyValues
///
/// \param completion completion block which returns either failure or success keys in status field in NSDictionary.
- (void)sendLoginDetails:(void (^ _Nonnull)(id _Nullable))completion;

/// To standard logout from the HurreeSDK
///
/// \param completion completion block which returns after completing a series of functionalities i.e. removing the loggedin user information from the database, invalidating the processes for upload etc.
- (void)logoutUser:(void (^ _Nonnull)(id _Nullable))completion;

/// To save the User specific information which help the business for better CRM services. This method is to be called before the sendLoginDetails method.
///
/// \param firstName @firstname of the logging in user
///
/// \param lastName @lastname of the logging in user
///
/// \param phoneNumber @phonenumber of the logging in user
///
/// \param email @email address of the logging in user
///
/// \param userImageURL @user_Image_URL of the logging in user's image
///
/// \param gender @gender of the logging in user
///
/// \param dateOfBirth @dateOfBirth of the logging in user
- (void)deportUserValues:(NSString * _Nonnull)firstName lastName:(NSString * _Nonnull)lastName phoneNumber:(NSString * _Nonnull)phoneNumber email:(NSString * _Nullable)email userImageURL:(NSString * _Nullable)userImageURL gender:(NSString * _Nullable)gender dateOfBirth:(NSString * _Nullable)dateOfBirth;

/// To save the app specific mandatory information for the successful login of the user.
///
/// \param app _group_key:     @app_group_key retrieved from the HurreeSDk website after successful app group creation(prior to the app_key)
///
/// \param app _key:           @app_key retrieved from the HurreeSDK website after successful app creation.
///
/// \param uniqueUserID @uniqueUserID is the unique ID that is retrieved from the normal login of your app i.e. returned from the native app login process.
///
/// \param deviceTokenString @deviceTokenString is the device token received in the didRegisterForRemoteNotificationsWithDeviceToken of Appdelegate. That's why recommended that the login code snippet should be implemented in didRegisterForRemoteNotificationsWithDeviceToken as it will update the login time and device token on the server.
///
/// \param timerValue @timeValue is the timer time interval value in seconds. Minimum setup to 300 seconds.
- (void)deportKeyValues:(NSString * _Nonnull)app_group_key app_key:(NSString * _Nonnull)app_key uniqueUserID:(id _Nonnull)uniqueUserID deviceTokenString:(id _Nullable)deviceTokenString timerValue:(id _Nullable)timerValue isiOSNative:(BOOL)isiOSNative;

/// In order to accomplish the logout and login in single function, rather than using the standard methods for the login and logout, you can use change user.\Important 
///
/// This function will automatically logout the current loggedin user and login with user whose login details are passed in the function. You can't control the process arbitrarily. In case you want to control over the process of logout and login, it is suggested that you use standard logout and login methods.
///
/// \param uniqueUserID @uniqueUserID is the unique ID that is retrieved from the normal login of your app i.e. returned from the native app login process.
///
/// \param deviceTokenString @deviceTokenString is the device token received in the didRegisterForRemoteNotificationsWithDeviceToken of Appdelegate. That's why recommended that the login code snippet should be implemented in didRegisterForRemoteNotificationsWithDeviceToken as it will update the login time and device token on the server.
///
/// \param timerValue @timeValue is the timer time interval value in seconds. Minimum setup to 300 seconds.
///
/// \param firstName @firstname of the logging in user
///
/// \param lastName @lastname of the logging in user
///
/// \param phoneNumber @phonenumber of the logging in user
///
/// \param email @email address of the logging in user
///
/// \param userImageURL @user_Image_URL of the logging in user's image
///
/// \param gender @gender of the logging in user
///
/// \param dateOfBirth @dateOfBirth of the logging in user
///
/// \param completion completion block which returns after completing a series of functionalities i.e. removing the loggedin user information from the database, invalidating the processes for upload etc.
- (void)changeUser:(NSString * _Nonnull)uniqueUserID deviceTokenString:(NSString * _Nullable)deviceTokenString timerValue:(NSNumber * _Nullable)timerValue firstName:(NSString * _Nonnull)firstName lastName:(NSString * _Nonnull)lastName phoneNumber:(NSString * _Nonnull)phoneNumber email:(NSString * _Nullable)email userImageURL:(NSString * _Nullable)userImageURL gender:(NSString * _Nullable)gender dateOfBirth:(NSString * _Nullable)dateOfBirth completion:(void (^ _Nonnull)(NSDictionary * _Nullable))completion;

/// To show the SDK notification view after push notification received. shownotification will present the custom view with the information passed in the parameters.
///
/// \param appDelegate @appDelegate is the UIApplication delegate of the callee application
///
/// \param notificationInfoDict @notificationInfoDict is the aps of the push dictionary received in the didReceiveRemoteNotification in the Appdelegate
- (void)shownotification:(id <UIApplicationDelegate> _Nonnull)appDelegate notificationInfoDict:(id _Nonnull)notificationInfoDict;

/// Your application may have the functionality of the push notification. When you receive the push notification it must be required to govern that the push noification received was sent from HurreeSDK or the callee application. pushNotificationWasSentFromHurree will return true if push notification was sent from HurreeSDK else false.
///
/// \param options @options is the aps keys that you receive in didReceiveRemoteNotification in Appdelegate.
///
/// \returns  functin returns true if push notification was sent from HurreeSDK else returns false.
- (BOOL)pushNotificationWasSentFromHurree:(id _Nullable)options;

/// This function logs the purchases made by the loggedin user within your application. You need to call this function SKProduct class where you receive the details of the purchased product. These details will be further passed to this function as parameter so that log event can be sucessfully completed.
///
/// <pre>[locale objectForKey:NSLocaleCurrencyCode]</pre>

/// Supported currency symbols include: AED, AFN, ALL, AMD, ANG, AOA, ARS, AUD, AWG, AZN, BAM, BBD,
/// BDT, BGN, BHD, BIF, BMD, BND, BOB, BRL, BSD, BTC, BTN, BWP, BYR, BZD, CAD, CDF, CHF, CLF, CLP,
/// CNY, COP, CRC, CUC, CUP, CVE, CZK, DJF, DKK, DOP, DZD, EEK, EGP, ERN, ETB, EUR, FJD, FKP, GBP,
/// GEL, GGP, GHS, GIP, GMD, GNF, GTQ, GYD, HKD, HNL, HRK, HTG, HUF, IDR, ILS, IMP, INR, IQD, IRR,
/// ISK, JEP, JMD, JOD, JPY, KES, KGS, KHR, KMF, KPW, KRW, KWD, KYD, KZT, LAK, LBP, LKR, LRD, LSL,
/// LTL, LVL, LYD, MAD, MDL, MGA, MKD, MMK, MNT, MOP, MRO, MTL, MUR, MVR, MWK, MXN, MYR, MZN,
/// NAD, NGN, NIO, NOK, NPR, NZD, OMR, PAB, PEN, PGK, PHP, PKR, PLN, PYG, QAR, RON, RSD, RUB,
/// RWF, SAR, SBD, SCR, SDG, SEK, SGD, SHP, SLL, SOS, SRD, STD, SVC, SYP, SZL, THB, TJS, TMT, TND,
/// TOP, TRY, TTD, TWD, TZS, UAH, UGX, USD, UYU, UZS, VEF, VND, VUV, WST, XAF, XAG, XAU, XCD,
/// XDR, XOF, XPD, XPF, XPT, YER, ZAR, ZMK, ZMW and ZWL
///
/// \param productIdentifier @productIdentifier is the string that tells HurreeSDk that which product was purchased. It is the string which is returned by iTunes store.
///
/// \param currencyCode @currenycode Currencies should be represented as an ISO 4217 currency code.It can be obtained the currency code by invoking:
///
/// \param price @price should be same as that of the SKProduct class returned value.
///
/// \param quantity @quantity is the quantity of the product purchased.
- (void)logPurchaseWithCurrencyWithPriceAndQuantity:(NSString * _Nonnull)productIdentifier currencyCode:(NSString * _Nonnull)currencyCode price:(NSDecimalNumber * _Nonnull)price quantity:(NSInteger)quantity;

/// Register Device funtion notify SDK for the first usage of the application after download. For that you must need to call this method from AppDelegate didFinishLaunchingWithOptions.
///
/// \param appKey @app_key retrieved from the HurreeSDK website after successful app creation.
///
/// \param appGroupKey @app_group_key retrieved from the HurreeSDk website after successful app group creation(prior to the app_key)
///
/// \param completion completion block which returns the appropriate messages in NSDictionary in key "status"
- (void)registerDevice:(NSString * _Nonnull)appKey appGroupKey:(NSString * _Nonnull)appGroupKey completion:(void (^ _Nonnull)(NSDictionary * _Nullable))completion;

/// This function logs the crash report that your application encounter with. For now, it is capturing the NSException type crash logs and logs them to the HurreeSDK. You need to call this function after successful login.
- (void)addMonitoringForCrashes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSData (SWIFT_EXTENSION(HurreeSDK))
@end


@interface NSMutableData (SWIFT_EXTENSION(HurreeSDK))
@end


@interface UIApplication (SWIFT_EXTENSION(HurreeSDK))
@end


@interface UIColor (SWIFT_EXTENSION(HurreeSDK))
@end


@interface UIDevice (SWIFT_EXTENSION(HurreeSDK))
@end


@interface UIImage (SWIFT_EXTENSION(HurreeSDK))
@end


@interface UIImageView (SWIFT_EXTENSION(HurreeSDK))
@end


@interface UILabel (SWIFT_EXTENSION(HurreeSDK))
@end


@interface UIView (SWIFT_EXTENSION(HurreeSDK))
@end

#pragma clang diagnostic pop
